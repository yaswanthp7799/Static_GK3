{"version":3,"sources":["ModuleSelection.js","AnalysisPage.js","quiz.js","App.js","reportWebVitals.js","index.js"],"names":["ModuleSelection","_ref","onSelectModule","modules","Object","keys","questionsData","React","createElement","map","module","index","key","onClick","handleModuleSelect","AnalysisPage","questions","userAnswers","className","question","isCorrect","userAnswer","correctAnswer","getAnswerStatus","concat","Quiz","setQuestions","useState","currentQuestionIndex","setCurrentQuestionIndex","answered","setAnswered","setUserAnswers","showResults","setShowResults","marks","setMarks","selectedModule","setSelectedModule","showModuleSelection","setShowModuleSelection","selectedOption","setSelectedOption","selectedModuleName","setSelectedModuleName","showAnalysis","setShowAnalysis","shuffleOptions","options","sort","Math","random","useEffect","moduleQuestions","shuffledQuestions","shuffleQuestions","Array","length","fill","handleGoHome","option","selectedAnswer","prevAnswers","updatedAnswers","newAnswered","handleAnswerClick","handlePreviousQuestion","disabled","handleNextQuestion","handleSubmit","totalMarks","i","handleAnalysis","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.651a7c9e.chunk.js","sourcesContent":["// ModuleSelection.js\r\n\r\nimport React, { useState } from 'react';\r\nimport questionsData from './questions.json'; // Import your JSON file\r\n\r\nconst ModuleSelection = ({ onSelectModule }) => {\r\n  const modules = Object.keys(questionsData); // Get the available modules\r\n\r\n  const handleModuleSelect = (module) => {\r\n    onSelectModule(module);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Select Module</h2>\r\n      <ul>\r\n        {modules.map((module, index) => (\r\n          <li key={index} onClick={() => handleModuleSelect(module)}>\r\n            {module}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModuleSelection;\r\n","// AnalysisPage.js\r\nimport React from 'react';\r\nimport './AnalysisPage.css';\r\n\r\nconst AnalysisPage = ({ questions, userAnswers }) => {\r\n  const getAnswerStatus = (index) => {\r\n    const question = questions[index];\r\n    const userAnswer = userAnswers[index];\r\n    return {\r\n      isCorrect: userAnswer === question.correctAnswer,\r\n      userAnswer,\r\n      correctAnswer: question.correctAnswer,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"analysis-container\">\r\n      <h2>Analysis</h2>\r\n      {questions.map((question, index) => {\r\n        const { isCorrect, userAnswer, correctAnswer } = getAnswerStatus(index);\r\n        return (\r\n          <div\r\n            key={index}\r\n            className={`question-analysis ${isCorrect ? 'correct' : 'incorrect'}`}\r\n          >\r\n            <p>{question.question}</p>\r\n            <p className={`user-answer ${isCorrect ? 'correct' : 'incorrect'}`}>\r\n              Your answer: {userAnswer}\r\n            </p>\r\n            {!isCorrect && (\r\n              <p className=\"correct-answer\">Correct answer: {correctAnswer}</p>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnalysisPage;\r\n","\r\nimport React, { useState, useEffect } from 'react';\r\nimport ModuleSelection from './ModuleSelection';\r\nimport AnalysisPage from './AnalysisPage'; // Import the AnalysisPage component\r\nimport questionsData from './questions.json';\r\nimport './Quiz.css'; // Import CSS file with styles\r\n\r\nconst Quiz = () => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [answered, setAnswered] = useState([]);\r\n  const [userAnswers, setUserAnswers] = useState([]);\r\n  const [showResults, setShowResults] = useState(false);\r\n  const [marks, setMarks] = useState(0);\r\n  const [selectedModule, setSelectedModule] = useState(null);\r\n  const [showModuleSelection, setShowModuleSelection] = useState(true);\r\n  const [selectedOption, setSelectedOption] = useState('');\r\n  const [selectedModuleName, setSelectedModuleName] = useState('');\r\n  const [showAnalysis, setShowAnalysis] = useState(false);\r\n\r\n  const shuffleOptions = (options) => {\r\n    return options.sort(() => Math.random() - 0.5);\r\n  };\r\n\r\n  const shuffleQuestions = (questions) => {\r\n    return questions.sort(() => Math.random() - 0.5);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedModule) {\r\n      const moduleQuestions = questionsData[selectedModule];\r\n      if (moduleQuestions) {\r\n        const shuffledQuestions = shuffleQuestions(moduleQuestions);\r\n        setQuestions(\r\n          shuffledQuestions.map((question) => ({\r\n            ...question,\r\n            options: shuffleOptions(question.options),\r\n          }))\r\n        );\r\n        setShowModuleSelection(false);\r\n        setAnswered(Array(shuffledQuestions.length).fill(false));\r\n        setUserAnswers(Array(shuffledQuestions.length).fill(''));\r\n        setCurrentQuestionIndex(0);\r\n        setShowResults(false);\r\n        setMarks(0);\r\n        setSelectedModuleName(selectedModule); // Store the selected module name\r\n      }\r\n    }\r\n  }, [selectedModule]);\r\n\r\n  const handleModuleSelect = (module) => {\r\n    setSelectedModule(module);\r\n  };\r\n\r\n  const handleAnswerClick = (selectedAnswer) => {\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n\r\n    if (!answered[currentQuestionIndex]) {\r\n      const newAnswered = [...answered];\r\n      newAnswered[currentQuestionIndex] = true;\r\n      setAnswered(newAnswered);\r\n\r\n      setUserAnswers((prevAnswers) => {\r\n        const updatedAnswers = [...prevAnswers];\r\n        updatedAnswers[currentQuestionIndex] = selectedAnswer;\r\n        return updatedAnswers;\r\n      });\r\n\r\n      setSelectedOption(selectedAnswer); // Store the selected option\r\n    } else {\r\n      setUserAnswers((prevAnswers) => {\r\n        const updatedAnswers = [...prevAnswers];\r\n        updatedAnswers[currentQuestionIndex] = selectedAnswer;\r\n        return updatedAnswers;\r\n      });\r\n\r\n      setSelectedOption(selectedAnswer); // Update the last selected option\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    let totalMarks = 0;\r\n    for (let i = 0; i < questions.length; i++) {\r\n      if (questions[i].correctAnswer === userAnswers[i]) {\r\n        totalMarks += 1;\r\n      } else if (userAnswers[i] !== '' && questions[i].correctAnswer !== userAnswers[i]) {\r\n        totalMarks -= 0.25; // Deduct 0.25 for each wrong answer\r\n      }\r\n    }\r\n    setMarks(totalMarks > 0 ? totalMarks : 0);\r\n    setShowResults(true);\r\n  };\r\n\r\n  const handleNextQuestion = () => {\r\n    setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    setSelectedOption(''); // Reset selected option when moving to the next question\r\n  };\r\n\r\n  const handlePreviousQuestion = () => {\r\n    setCurrentQuestionIndex(currentQuestionIndex - 1);\r\n    setSelectedOption(''); // Reset selected option when moving to the previous question\r\n  };\r\n\r\n  const handleGoHome = () => {\r\n    setSelectedModule(null); // Reset selected module\r\n    setShowModuleSelection(true);\r\n    setCurrentQuestionIndex(0);\r\n    setAnswered([]);\r\n    setUserAnswers([]);\r\n    setShowResults(false);\r\n    setMarks(0);\r\n    setSelectedModuleName(''); // Clear the selected module name\r\n  };\r\n\r\n  const handleAnalysis = () => {\r\n    setShowAnalysis(true); // Show analysis page on button click\r\n  };\r\n\r\n  return (\r\n    <div className=\"quiz-container\">\r\n      {!showModuleSelection && !showAnalysis && (\r\n        <div>\r\n          <div>\r\n            <button onClick={handleGoHome} className=\"home-btn\">\r\n              Go Back to Home\r\n            </button>\r\n            {selectedModuleName && (\r\n              <span className=\"selected-module\">{selectedModuleName}</span>\r\n            )}\r\n          </div>\r\n          <div className=\"main-content\">\r\n            <div className=\"question\">\r\n              <h2>{questions[currentQuestionIndex].question}</h2>\r\n              <ul className=\"options\">\r\n                {questions[currentQuestionIndex].options.map((option, index) => (\r\n                  <li\r\n                    key={index}\r\n                    onClick={() => handleAnswerClick(option)}\r\n                    className={option === selectedOption ? 'selected' : ''}\r\n                  >\r\n                    {option}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n            <div className=\"pagination\">\r\n            <button\r\n              onClick={handlePreviousQuestion}\r\n              disabled={currentQuestionIndex === 0}\r\n              className=\"nav-btn\"\r\n            >\r\n              Previous\r\n            </button>\r\n            <span className=\"question-info\">\r\n              Question {currentQuestionIndex + 1} of {questions.length}\r\n            </span>\r\n            {!showResults && currentQuestionIndex !== questions.length - 1 && (\r\n              <button\r\n                onClick={handleNextQuestion}\r\n                className=\"nav-btn\"\r\n              >\r\n                Next\r\n              </button>\r\n            )}\r\n            {currentQuestionIndex === questions.length - 1 && !showResults && (\r\n              <button onClick={handleSubmit} className=\"submit-btn\">\r\n                Submit\r\n              </button>\r\n            )}\r\n          </div>\r\n          {showResults && (\r\n            <div>\r\n              <div className=\"result-card\">\r\n                <h2>Results</h2>\r\n                <p>Your score: {marks} out of {questions.length}</p>\r\n                <button onClick={handleAnalysis} className=\"analysis-btn\">\r\n                  Analysis\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          </div>\r\n        </div>\r\n      )}\r\n      {/* Render the AnalysisPage component if showAnalysis is true */}\r\n      {showAnalysis && (\r\n        <AnalysisPage questions={questions} userAnswers={userAnswers} />\r\n      )}\r\n      {showModuleSelection && (\r\n        <ModuleSelection onSelectModule={handleModuleSelect} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n","import React from 'react';\nimport './App.css'; // You can create this CSS file for styling\nimport Quiz from './quiz';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}